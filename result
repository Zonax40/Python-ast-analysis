Module(body=[ImportFrom(module='tensorflow.python.ops.linalg.linalg_impl', names=[alias(name='matrix_exponential', asname='expm')], level=0), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='expm', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])
Entering new file:/home/wind/.local/lib/python3.10/site-packages/tensorflow/python/ops/linalg/linalg_impl.py
matrix_exponential:matrix_exponential
+++(name='matrix_exponential', args=arguments(posonlyargs=[], args=[arg(arg='input'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Computes the matrix exponential of one or more square matrices.\n\n  $$exp(A) = \\sum_{n=0}^\\infty A^n/n!$$\n\n  The exponential is computed using a combination of the scaling and squaring\n  method and the Pade approximation. Details can be found in:\n  Nicholas J. Higham, "The scaling and squaring method for the matrix\n  exponential revisited," SIAM J. Matrix Anal. Applic., 26:1179-1193, 2005.\n\n  The input is a tensor of shape `[..., M, M]` whose inner-most 2 dimensions\n  form square matrices. The output is a tensor of the same shape as the input\n  containing the exponential for all input submatrices `[..., :, :]`.\n\n  Args:\n    input: A `Tensor`. Must be `float16`, `float32`, `float64`, `complex64`, or\n      `complex128` with shape `[..., M, M]`.\n    name:  A name to give this `Op` (optional).\n\n  Returns:\n    the matrix exponential of the input.\n\n  Raises:\n    ValueError: An unsupported type is provided as input.\n\n  @compatibility(scipy)\n  Equivalent to scipy.linalg.expm\n  @end_compatibility\n  ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='ops', ctx=Load()), attr='name_scope', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value='matrix_exponential'), List(elts=[Name(id='input', ctx=Load())], ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='ops', ctx=Load()), attr='convert_to_tensor', ctx=Load()), args=[Name(id='input', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='input'))])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value=0), Constant(value=0)], ctx=Load())]), body=[Return(value=Name(id='matrix', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='batch_shape', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='batch_shape', ctx=Load()), attr='is_fully_defined', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='batch_shape', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='matrix', ctx=Load()), Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[]), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=0))])], keywords=[])), Assign(targets=[Name(id='l1_norm', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='reduce_max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='reduce_sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='abs', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])], keywords=[keyword(arg='axis', value=BinOp(left=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='size', ctx=Load()), args=[Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])], keywords=[]), op=Sub(), right=Constant(value=2)))])], keywords=[keyword(arg='axis', value=UnaryOp(op=USub(), operand=Constant(value=1)))]), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='array_ops', ctx=Load()), attr='newaxis', ctx=Load()), Attribute(value=Name(id='array_ops', ctx=Load()), attr='newaxis', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='const', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='constant_op', ctx=Load()), attr='constant', ctx=Load()), args=[Name(id='x', ctx=Load()), Attribute(value=Name(id='l1_norm', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]))), FunctionDef(name='_nest_where', args=arguments(posonlyargs=[], args=[arg(arg='vals'), arg(arg='cases')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='vals', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cases', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='vals', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='where_v2', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='less', ctx=Load()), args=[Name(id='l1_norm', ctx=Load()), Call(func=Name(id='const', ctx=Load()), args=[Subscript(value=Name(id='vals', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), Subscript(value=Name(id='cases', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='cases', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='where_v2', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='less', ctx=Load()), args=[Name(id='l1_norm', ctx=Load()), Call(func=Name(id='const', ctx=Load()), args=[Subscript(value=Name(id='vals', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]), Subscript(value=Name(id='cases', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='_nest_where', ctx=Load()), args=[Subscript(value=Name(id='vals', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Subscript(value=Name(id='cases', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load()), ops=[In()], comparators=[List(elts=[Attribute(value=Name(id='dtypes', ctx=Load()), attr='float16', ctx=Load()), Attribute(value=Name(id='dtypes', ctx=Load()), attr='float32', ctx=Load()), Attribute(value=Name(id='dtypes', ctx=Load()), attr='complex64', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='maxnorm', ctx=Store())], value=Call(func=Name(id='const', ctx=Load()), args=[Constant(value=3.92572478313866)], keywords=[])), Assign(targets=[Name(id='squarings', ctx=Store())], value=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='floor', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Name(id='l1_norm', ctx=Load()), op=Div(), right=Name(id='maxnorm', ctx=Load()))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='const', ctx=Load()), args=[Constant(value=2.0)], keywords=[])], keywords=[]))], keywords=[]), Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u3', ctx=Store()), Name(id='v3', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade3', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u5', ctx=Store()), Name(id='v5', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade5', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u7', ctx=Store()), Name(id='v7', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade7', ctx=Load()), args=[BinOp(left=Name(id='matrix', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='pow', ctx=Load()), args=[Call(func=Name(id='const', ctx=Load()), args=[Constant(value=2.0)], keywords=[]), Name(id='squarings', ctx=Load())], keywords=[]), Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='conds', ctx=Store())], value=Tuple(elts=[Constant(value=0.4258730016922831), Constant(value=1.880152677804762)], ctx=Load())), Assign(targets=[Name(id='u', ctx=Store())], value=Call(func=Name(id='_nest_where', ctx=Load()), args=[Name(id='conds', ctx=Load()), Tuple(elts=[Name(id='u3', ctx=Load()), Name(id='u5', ctx=Load()), Name(id='u7', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='_nest_where', ctx=Load()), args=[Name(id='conds', ctx=Load()), Tuple(elts=[Name(id='v3', ctx=Load()), Name(id='v5', ctx=Load()), Name(id='v7', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load()), ops=[In()], comparators=[List(elts=[Attribute(value=Name(id='dtypes', ctx=Load()), attr='float64', ctx=Load()), Attribute(value=Name(id='dtypes', ctx=Load()), attr='complex128', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='maxnorm', ctx=Store())], value=Call(func=Name(id='const', ctx=Load()), args=[Constant(value=5.371920351148152)], keywords=[])), Assign(targets=[Name(id='squarings', ctx=Store())], value=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='maximum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='floor', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=Name(id='l1_norm', ctx=Load()), op=Div(), right=Name(id='maxnorm', ctx=Load()))], keywords=[]), op=Div(), right=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='const', ctx=Load()), args=[Constant(value=2.0)], keywords=[])], keywords=[]))], keywords=[]), Constant(value=0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u3', ctx=Store()), Name(id='v3', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade3', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u5', ctx=Store()), Name(id='v5', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade5', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u7', ctx=Store()), Name(id='v7', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade7', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u9', ctx=Store()), Name(id='v9', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade9', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='u13', ctx=Store()), Name(id='v13', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_matrix_exp_pade13', ctx=Load()), args=[BinOp(left=Name(id='matrix', ctx=Load()), op=Div(), right=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='cast', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='pow', ctx=Load()), args=[Call(func=Name(id='const', ctx=Load()), args=[Constant(value=2.0)], keywords=[]), Name(id='squarings', ctx=Load())], keywords=[]), Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='conds', ctx=Store())], value=Tuple(elts=[Constant(value=0.01495585217958292), Constant(value=0.253939833006323), Constant(value=0.9504178996162932), Constant(value=2.097847961257068)], ctx=Load())), Assign(targets=[Name(id='u', ctx=Store())], value=Call(func=Name(id='_nest_where', ctx=Load()), args=[Name(id='conds', ctx=Load()), Tuple(elts=[Name(id='u3', ctx=Load()), Name(id='u5', ctx=Load()), Name(id='u7', ctx=Load()), Name(id='u9', ctx=Load()), Name(id='u13', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='_nest_where', ctx=Load()), args=[Name(id='conds', ctx=Load()), Tuple(elts=[Name(id='v3', ctx=Load()), Name(id='v5', ctx=Load()), Name(id='v7', ctx=Load()), Name(id='v9', ctx=Load()), Name(id='v13', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='tf.linalg.expm does not support matrices of type %s'), op=Mod(), right=Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load()))], keywords=[]))])]), Assign(targets=[Name(id='is_finite', ctx=Store())], value=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='is_finite', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='reduce_max', ctx=Load()), args=[Name(id='l1_norm', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='nan', ctx=Store())], value=Call(func=Attribute(value=Name(id='constant_op', ctx=Load()), attr='constant', ctx=Load()), args=[Attribute(value=Name(id='np', ctx=Load()), attr='nan', ctx=Load()), Attribute(value=Name(id='matrix', ctx=Load()), attr='dtype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='control_flow_ops', ctx=Load()), attr='cond', ctx=Load()), args=[Name(id='is_finite', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='linalg_ops', ctx=Load()), attr='matrix_solve', ctx=Load()), args=[BinOp(left=UnaryOp(op=USub(), operand=Name(id='u', ctx=Load())), op=Add(), right=Name(id='v', ctx=Load())), BinOp(left=Name(id='u', ctx=Load()), op=Add(), right=Name(id='v', ctx=Load()))], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='fill', ctx=Load()), args=[Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='matrix', ctx=Load())], keywords=[]), Name(id='nan', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='max_squarings', ctx=Store())], value=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='reduce_max', ctx=Load()), args=[Name(id='squarings', ctx=Load())], keywords=[])), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='const', ctx=Load()), args=[Constant(value=0.0)], keywords=[])), FunctionDef(name='c', args=arguments(posonlyargs=[], args=[arg(arg='i'), arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='control_flow_ops', ctx=Load()), attr='cond', ctx=Load()), args=[Name(id='is_finite', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='less', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='max_squarings', ctx=Load())], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='constant_op', ctx=Load()), attr='constant', ctx=Load()), args=[Constant(value=False)], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='b', args=arguments(posonlyargs=[], args=[arg(arg='i'), arg(arg='r')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='where_v2', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='less', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='squarings', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='math_ops', ctx=Load()), attr='matmul', ctx=Load()), args=[Name(id='r', ctx=Load()), Name(id='r', ctx=Load())], keywords=[]), Name(id='r', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='result', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='control_flow_ops', ctx=Load()), attr='while_loop', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='b', ctx=Load()), List(elts=[Name(id='i', ctx=Load()), Name(id='result', ctx=Load())], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='matrix', ctx=Load()), attr='shape', ctx=Load()), attr='is_fully_defined', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='result', ctx=Load()), Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='concat', ctx=Load()), args=[Tuple(elts=[Name(id='batch_shape', ctx=Load()), Subscript(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='shape', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], ctx=Load())], keywords=[keyword(arg='axis', value=Constant(value=0))])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='array_ops', ctx=Load()), attr='reshape', ctx=Load()), args=[Name(id='result', ctx=Load()), Call(func=Attribute(value=Name(id='batch_shape', ctx=Load()), attr='concatenate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='result', ctx=Load()), attr='shape', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[Call(func=Name(id='tf_export', ctx=Load()), args=[Constant(value='linalg.expm')], keywords=[]), Attribute(value=Name(id='dispatch', ctx=Load()), attr='add_dispatch_support', ctx=Load())])
